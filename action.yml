name: 'ECS Automation'
description: 'GitHub Action for ECS deployment'
branding:
  icon: 'package'
  color: 'blue'
inputs:
  ecr-repo:
    description: "ECR Repository"
    required: true
    default: ""
  ecs-service:
    description: "ECS Service"
    required: true
    default: ""
  task-definition:
    description: "ECS Service task definition"
    required: true
    default: ""
  ecs-cluster:
    description: "ECS Cluster"
    required: true
    default: "leela-test-cluster"    
  region:
    description: "AWS Region"
    required: true
    default: "ap-south-1"       
  aws-access-key-id:
    description: "AWS Access Key"
    required: true
    default: ""   
  aws-secret-access-key:
    description: "AWS Secret Key"
    required: true
    default: ""       

runs:
  using: "composite"
  steps: 
    - name: Setting env variables for main branch
      if: ${{ github.ref == 'refs/heads/main' && always() }}
      run: |
        echo "This is running on main branch"
        AWS_REGION=${{ inputs.region }}                          # set this to your preferred AWS region, e.g. us-west-1
        ECR_REPOSITORY=${{ inputs.ecr-repo }}          # set this to your Amazon ECR repository name
        ECS_SERVICE=${{ inputs.ecs-service }}                        # set this to your Amazon ECS service name
        ECS_CLUSTER=${{ inputs.ecs-cluster }}                # set this to your Amazon ECS cluster name 
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV     
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV    
        echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV     
        echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV 
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV     
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV   
      shell: bash        
    - name: Setting env variables for release branch
      if: ${{ github.ref == 'refs/heads/release' && always() }}
      run: |
        echo "This is running on release branch"
        AWS_REGION=${{ inputs.region }}                          # set this to your preferred AWS region, e.g. us-west-1
        ECR_REPOSITORY=${{ inputs.ecr-repo }}            # set this to your Amazon ECR repository name
        ECS_SERVICE=${{ inputs.ecs-service }}                          # set this to your Amazon ECS service name
        ECS_CLUSTER=${{ inputs.ecs-cluster }}                 # set this to your Amazon ECS cluster namen    
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV     
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV    
        echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV     
        echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV 
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV     
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV     
      shell: bash              
    - name: Setting env variables for dev branch
      if: ${{ github.ref == 'refs/heads/dev' && always() }}
      run: |
        echo "This is running on dev branch"
        AWS_REGION=${{ inputs.region }}                          # set this to your preferred AWS region, e.g. us-west-1
        ECR_REPOSITORY=${{ inputs.ecr-repo }}           # set this to your Amazon ECR repository name
        ECS_SERVICE=nginx-test                         # set this to your Amazon ECS service name
        ECS_CLUSTER=${{ inputs.ecs-cluster }}                 # set this to your Amazon ECS cluster name
        environment=production                         # containerDefinitions section of your task definition    
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV     
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV    
        echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV     
        echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV 
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV     
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV   
      shell: bash              
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Set outputs
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short=11 HEAD)"
      shell: bash            
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        echo -e "It worked ! \nImage Tag is $IMAGE_TAG \nBy Leelaprakash" > index.html
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      shell: bash              
    - name: Geting Latest Task Definition from ECS
      id: ecs-task-def
      run: |
        echo "::set-output name=task_definition::$(aws ecs describe-task-definition --task-definition ${{ inputs.task-definition }} --query taskDefinition)"
        aws ecs describe-task-definition --task-definition ${{ inputs.task-definition }} --query taskDefinition > /home/runner/td/task-definition.json
        echo "::set-output name=task_definition_image::$(aws ecs describe-task-definition --task-definition ${{ inputs.task-definition }} --query taskDefinition.containerDefinitions[0].name)"
      shell: bash    
    - name: test
      id: ecs-task-def
      run: |
        ls -lrta /home/runner/td/
        whoami
        ls -lrta
      shell: bash        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: /home/runner/td/task-definition.json
        container-name: ${{ steps.ecs-task-def.outputs.task_definition_image }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false
    #############################################################  Extra Deployment in case of release branch ######################################################    
    - name: Setting env variables for release branch [ Extra Deployment in Case of release branch ]
      if: ${{ github.ref == 'refs/heads/release' && always() }}
      run: |
        echo "This is running on main branch"
        AWS_REGION=${{ inputs.region }}                          # set this to your preferred AWS region, e.g. us-west-1
        ECR_REPOSITORY=${{ inputs.ecr-repo }}           # set this to your Amazon ECR repository name
        ECS_SERVICE=${{ inputs.ecs-service }}                        # set this to your Amazon ECS service name
        ECS_CLUSTER=${{ inputs.ecs-cluster }}                 # set this to your Amazon ECS cluster name   
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV     
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV    
        echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV     
        echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV 
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV     
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV  
      shell: bash              
    - name: Checkout 2
      if: ${{ github.ref == 'refs/heads/release' && always() }}    
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials 2
      if: ${{ github.ref == 'refs/heads/release' && always() }}    
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR 2
      if: ${{ github.ref == 'refs/heads/release' && always() }}    
      id: login-ecr-2
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      if: ${{ github.ref == 'refs/heads/release' && always() }}    
      id: build-image-2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-2.outputs.registry }}
        IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        OLD_IMAGE_TAG: ${{ steps.vars.outputs.image }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        echo -e "It worked ! \nImage Tag is $IMAGE_TAG \nBy Leelaprakash" > index.html
        docker tag OLD_IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      shell: bash              
    - name: Geting Latest Task Definition from ECS
      id: ecs-task-def-2
      run: |
        echo "::set-output name=task_definition::$(aws ecs describe-task-definition --task-definition ${{ inputs.task-definition }} --query taskDefinition)"
        #aws ecs describe-task-definition --task-definition ${{ inputs.task-definition }} --query taskDefinition > /home/runner/task-definition.json
        echo "::set-output name=task_definition_image::$(aws ecs describe-task-definition --task-definition ${{ inputs.task-definition }} --query taskDefinition.containerDefinitions[0].name)"
      shell: bash              
    - name: Fill in the new image ID in the Amazon ECS task definition
      if: ${{ github.ref == 'refs/heads/release' && always() }}    
      id: task-def-2
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.ecs-task-def-2.outputs.task_definition }}
        container-name: ${{ steps.ecs-task-def-2.outputs.task_definition_image }}
        image: ${{ steps.build-image-2.outputs.image }}

    - name: Deploy Amazon ECS task definition
      if: ${{ github.ref == 'refs/heads/release' && always() }}    
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-2.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false           
      